{
  "typeIndex": 2098017,
  "name": "Client-side XPath injection (reflected DOM-based)",
  "description": "<p>Reflected DOM-based vulnerabilities arise when data is copied from a request and echoed into the application's immediate response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the reflection to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based XPath injection  arises when a script incorporates controllable data into an XPath query. An attacker may be able to use this behavior to construct a URL that, if visited by another application user, will cause an arbitrary XPath query to execute, causing different data to be retrieved and processed by the application. Depending on the purpose for which the query results are used, it may be possible to subvert the application's logic, or cause unintended actions on behalf of the user.</p>\n\n<p>Burp Suite automatically identifies this issue using dynamic and static code analysis. Static analysis can lead to false positives that are not actually exploitable. If Burp Scanner has not provided any evidence resulting from dynamic analysis, you should review the relevant code and execution paths  to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>",
  "remediation": "<p>The most effective way to avoid DOM-based XPath injection vulnerabilities is not to incorporate into an XPath query any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from modifying the XPath query in inappropriate ways. This may involve strict validation of specific items to ensure they do not contain any characters that may interfere with the structure of the query when it is parsed. </p>",
  "webIntro": null,
  "typicalSeverity": "LOW",
  "references": [
    {
      "title": "Web Security Academy: Client-side XPath injection (DOM-based)",
      "url": "https://portswigger.net/web-security/dom-based/client-side-xpath-injection"
    }
  ],
  "vulnerabilityClassifications": [
    {
      "title": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
      "url": "https://cwe.mitre.org/data/definitions/79.html"
    },
    {
      "title": "CWE-116: Improper Encoding or Escaping of Output",
      "url": "https://cwe.mitre.org/data/definitions/116.html"
    },
    {
      "title": "CWE-159: Failure to Sanitize Special Element",
      "url": "https://cwe.mitre.org/data/definitions/159.html"
    },
    {
      "title": "CAPEC-83: XPath Injection",
      "url": "https://capec.mitre.org/data/definitions/83.html"
    }
  ]
}