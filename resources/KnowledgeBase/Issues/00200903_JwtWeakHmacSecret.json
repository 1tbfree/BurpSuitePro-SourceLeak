{
  "typeIndex": 2099459,
  "name": "JWT weak HMAC secret",
  "description": "<p>\n  The JSON Web Token specification provides several ways for developers to digitally sign payload claims.\n  This ensures data integrity and robust user authentication.\n  Whenever developers use HMAC signatures, they need to provide a secret key, which is used for both signing and verifying tokens.\n  If this secret is not strong enough, the whole signature can be compromised.\n</p>\n\n<p>\n  For every JWT observed in your traffic, Burp Suite attempts to brute-force the signature using a list of common weak secrets.\n  This process is performed offline, without sending any requests to the server.\n</p>\n\n<p>\n  If the secret can be brute-forced this way, a malicious user can modify the JWT header and payload, then re-sign the token with a valid signature for the server.\n  They could then exploit this vulnerability by supplying an arbitrary claim in the JWT payload to escalate their privileges or impersonate other users.\n  For example, if the token contains a \"username\": \"joe\" claim, they could change this to  \"username\": \"admin\".\n</p>",
  "remediation": "<p>\n  Ensure that a strong, unpredictable secret is used for calculating the HMAC signature on the server. We recommend using a randomly generated value at least 32 bytes in length.\n</p>",
  "webIntro": null,
  "typicalSeverity": "HIGH",
  "references": [],
  "vulnerabilityClassifications": []
}