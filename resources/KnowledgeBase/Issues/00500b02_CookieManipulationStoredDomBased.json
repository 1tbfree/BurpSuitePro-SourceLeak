{
  "typeIndex": 5245698,
  "name": "Cookie manipulation (stored DOM-based)",
  "description": "<p>Stored DOM-based vulnerabilities arise when user input is stored and later embedded into a response within a part of the DOM that is then processed in an unsafe way by a client-side script. An attacker can leverage the data storage to control a part of the response (for example, a JavaScript string) that can be used to trigger the DOM-based vulnerability.</p>\n\n<p>DOM-based cookie manipulation arises when a  script writes controllable data into the value of a cookie. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will set an arbitrary value in the user's cookie.</p>\n<p>The potential impact of the vulnerability depends on the role that the cookie plays within the application. If the cookie is used to control the behavior that results from certain user actions (for example, a 'production' versus 'demo' mode setting), then the attacker may be able to cause the user to perform unintended actions by manipulating the cookie's value. If the cookie is used to track the user's session, then the attacker may be able to perform a session fixation attack, in which they set the cookie's value to a valid token that they have obtained from the application, and then hijack the session during the victim user's subsequent interaction with the application.</p>\n\n<p>Burp Suite automatically identifies this issue using dynamic and static code analysis. Static analysis can lead to false positives that are not actually exploitable. If Burp Scanner has not provided any evidence resulting from dynamic analysis, you should review the relevant code and execution paths  to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>",
  "remediation": "<p>The most effective way to avoid DOM-based cookie manipulation vulnerabilities is not to dynamically write to cookies using data that originated from any untrusted source. This behavior should never be implemented for cookies that have any role in controlling privileged actions or user sessions within the application.</p>",
  "webIntro": null,
  "typicalSeverity": "LOW",
  "references": [
    {
      "title": "Web Security Academy: Cookie manipulation (DOM-based)",
      "url": "https://portswigger.net/web-security/dom-based/cookie-manipulation"
    }
  ],
  "vulnerabilityClassifications": [
    {
      "title": "CWE-565: Reliance on Cookies without Validation and Integrity Checking",
      "url": "https://cwe.mitre.org/data/definitions/565.html"
    },
    {
      "title": "CWE-829: Inclusion of Functionality from Untrusted Control Sphere",
      "url": "https://cwe.mitre.org/data/definitions/829.html"
    },
    {
      "title": "CAPEC-31: Accessing/Intercepting/Modifying HTTP Cookies",
      "url": "https://capec.mitre.org/data/definitions/31.html"
    }
  ]
}